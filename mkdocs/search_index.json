{
    "docs": [
        {
            "location": "/",
            "text": "Welcome!\n\n\nGame programming portfolio site",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "Game programming portfolio site",
            "title": "Welcome!"
        },
        {
            "location": "/levelmanager/",
            "text": "Level Manager",
            "title": "LevelManager"
        },
        {
            "location": "/levelmanager/#level-manager",
            "text": "",
            "title": "Level Manager"
        },
        {
            "location": "/audiomanager/",
            "text": "Audio Manager - FMOD\n\n\n\n\n// Local includes:\n#include \"AudioManager.h\"\n\n// Library includes:\n#include <iostream>\n\nAudioManager::AudioManager()\n: mp_FMODsystem(0)\n, mp_FMODchannel(0)\n, mp_FMODchannelMusic(0)\n, mp_FMODsound_music(nullptr)\n, mp_FMODsound_pShoot(0)\n, mp_FMODsound_pReload(0)\n, mp_FMODsound_pPickup(0)\n, mp_FMODsound_pDeath(0)\n, mp_FMODsound_zGroan1(0)\n, mp_FMODsound_zGroan2(0)\n, mp_FMODsound_zAttack(0)\n, mp_FMODsound_zDeath(0)\n, volume(0.7f)\n, volumeMusic(volume / 3)\n, muted(false)\n{\n}\n\nAudioManager::~AudioManager()\n{\n    mp_FMODsystem->release();\n}\n\nbool\nAudioManager::Initialise()\n{\n    FMOD_RESULT result;\n\n    result = FMOD::System_Create(&mp_FMODsystem);      // Create the main system object.\n    if (result != FMOD_OK)\n    {\n        printf(\"FMOD error! (%d) %s\\n\", result, FMOD_ErrorString(result));\n        exit(-1);\n    }\n\n    result = mp_FMODsystem->init(512, FMOD_INIT_NORMAL, 0);    // Initialize FMOD.\n    if (result != FMOD_OK)\n    {\n        printf(\"FMOD error! (%d) %s\\n\", result, FMOD_ErrorString(result));\n        exit(-1);\n    }\n    // Player Sound Effects\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pShoot);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pReload);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pPickup);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pDeath);\n    // Zombie Sound Effects\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zGroan1);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zGroan2);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zAttack);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zDeath);\n\n    // Music by Eric Matyas    www.soundimage.org\n    result = mp_FMODsystem->createStream(\"assets\\\\soundFX\\\\Monster-Street-Fighters.mp3\", FMOD_2D | FMOD_LOOP_NORMAL, 0, &mp_FMODsound_music);\n\n    if (result != FMOD_OK)\n    {\n        return(false);\n    }\n\n    return(true);\n}\n\nvoid\nAudioManager::Update()\n{\n    mp_FMODsystem->update();\n}\n\n// Two methods to play the player / zombie sound effects\nvoid\nAudioManager::PlaySound(soundEffectsPlayer _SoundEffect)\n{\n    if (!muted)\n    {\n        if (_SoundEffect == se_pSHOOT)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pShoot, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pRELOAD)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pReload, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pPICKUP)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pPickup, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pDEATH)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pDeath, 0, 0, &mp_FMODchannel);\n        }\n    }\n    VolumeControl();\n}\nvoid\nAudioManager::PlaySound(soundEffectsZombie _SoundEffect)\n{\n    if (!muted)\n    {\n        if (_SoundEffect == se_zGROAN1)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zGroan1, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zGROAN2)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zGroan2, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zATTACK)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zAttack, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zDEATH)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zDeath, 0, 0, &mp_FMODchannel);\n        }\n    }\n    VolumeControl();\n}\n\nvoid\nAudioManager::PlayMusic()\n{\n    mp_FMODsystem->playSound(mp_FMODsound_music, 0, 0, &mp_FMODchannelMusic);\n    mp_FMODchannelMusic->setVolume(volumeMusic);\n\n}\n\nvoid\nAudioManager::VolumeUp()\n{\n    volume += 0.1f;\n    volumeMusic = volume / 3;\n    VolumeControl();\n}\n\nvoid\nAudioManager::VolumeDown()\n{\n    volume -= 0.1f;\n    volumeMusic = volume / 3;\n    VolumeControl();\n}\n\nvoid\nAudioManager::VolumeControl()\n{\n    if (volume <= 0.0f)\n    {\n        muted = true;\n        volume = 0.0f;\n        mp_FMODchannel->setMute(muted);\n        mp_FMODchannel->setVolume(volume);\n        mp_FMODchannelMusic->setMute(muted);\n        mp_FMODchannelMusic->setVolume(volumeMusic);\n    }\n    else\n    {\n        muted = false;\n        if (volume > 1.0f)\n        {\n            volume = 1.0f;\n        }\n        mp_FMODchannel->setMute(muted);\n        mp_FMODchannel->setVolume(volume);\n        mp_FMODchannelMusic->setMute(muted);\n        mp_FMODchannelMusic->setVolume(volumeMusic);\n    }\n}",
            "title": "AudioManager"
        },
        {
            "location": "/audiomanager/#audio-manager-fmod",
            "text": "// Local includes:\n#include \"AudioManager.h\"\n\n// Library includes:\n#include <iostream>\n\nAudioManager::AudioManager()\n: mp_FMODsystem(0)\n, mp_FMODchannel(0)\n, mp_FMODchannelMusic(0)\n, mp_FMODsound_music(nullptr)\n, mp_FMODsound_pShoot(0)\n, mp_FMODsound_pReload(0)\n, mp_FMODsound_pPickup(0)\n, mp_FMODsound_pDeath(0)\n, mp_FMODsound_zGroan1(0)\n, mp_FMODsound_zGroan2(0)\n, mp_FMODsound_zAttack(0)\n, mp_FMODsound_zDeath(0)\n, volume(0.7f)\n, volumeMusic(volume / 3)\n, muted(false)\n{\n}\n\nAudioManager::~AudioManager()\n{\n    mp_FMODsystem->release();\n}\n\nbool\nAudioManager::Initialise()\n{\n    FMOD_RESULT result;\n\n    result = FMOD::System_Create(&mp_FMODsystem);      // Create the main system object.\n    if (result != FMOD_OK)\n    {\n        printf(\"FMOD error! (%d) %s\\n\", result, FMOD_ErrorString(result));\n        exit(-1);\n    }\n\n    result = mp_FMODsystem->init(512, FMOD_INIT_NORMAL, 0);    // Initialize FMOD.\n    if (result != FMOD_OK)\n    {\n        printf(\"FMOD error! (%d) %s\\n\", result, FMOD_ErrorString(result));\n        exit(-1);\n    }\n    // Player Sound Effects\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pShoot);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pReload);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pPickup);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_pDeath);\n    // Zombie Sound Effects\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zGroan1);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zGroan2);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zAttack);\n    result = mp_FMODsystem->createSound(\"assets\\\\soundFX\\\\SOUNDEFFECT.wav\", FMOD_2D, 0, &mp_FMODsound_zDeath);\n\n    // Music by Eric Matyas    www.soundimage.org\n    result = mp_FMODsystem->createStream(\"assets\\\\soundFX\\\\Monster-Street-Fighters.mp3\", FMOD_2D | FMOD_LOOP_NORMAL, 0, &mp_FMODsound_music);\n\n    if (result != FMOD_OK)\n    {\n        return(false);\n    }\n\n    return(true);\n}\n\nvoid\nAudioManager::Update()\n{\n    mp_FMODsystem->update();\n}\n\n// Two methods to play the player / zombie sound effects\nvoid\nAudioManager::PlaySound(soundEffectsPlayer _SoundEffect)\n{\n    if (!muted)\n    {\n        if (_SoundEffect == se_pSHOOT)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pShoot, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pRELOAD)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pReload, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pPICKUP)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pPickup, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_pDEATH)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_pDeath, 0, 0, &mp_FMODchannel);\n        }\n    }\n    VolumeControl();\n}\nvoid\nAudioManager::PlaySound(soundEffectsZombie _SoundEffect)\n{\n    if (!muted)\n    {\n        if (_SoundEffect == se_zGROAN1)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zGroan1, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zGROAN2)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zGroan2, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zATTACK)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zAttack, 0, 0, &mp_FMODchannel);\n        }\n        if (_SoundEffect == se_zDEATH)\n        {\n            mp_FMODsystem->playSound(mp_FMODsound_zDeath, 0, 0, &mp_FMODchannel);\n        }\n    }\n    VolumeControl();\n}\n\nvoid\nAudioManager::PlayMusic()\n{\n    mp_FMODsystem->playSound(mp_FMODsound_music, 0, 0, &mp_FMODchannelMusic);\n    mp_FMODchannelMusic->setVolume(volumeMusic);\n\n}\n\nvoid\nAudioManager::VolumeUp()\n{\n    volume += 0.1f;\n    volumeMusic = volume / 3;\n    VolumeControl();\n}\n\nvoid\nAudioManager::VolumeDown()\n{\n    volume -= 0.1f;\n    volumeMusic = volume / 3;\n    VolumeControl();\n}\n\nvoid\nAudioManager::VolumeControl()\n{\n    if (volume <= 0.0f)\n    {\n        muted = true;\n        volume = 0.0f;\n        mp_FMODchannel->setMute(muted);\n        mp_FMODchannel->setVolume(volume);\n        mp_FMODchannelMusic->setMute(muted);\n        mp_FMODchannelMusic->setVolume(volumeMusic);\n    }\n    else\n    {\n        muted = false;\n        if (volume > 1.0f)\n        {\n            volume = 1.0f;\n        }\n        mp_FMODchannel->setMute(muted);\n        mp_FMODchannel->setVolume(volume);\n        mp_FMODchannelMusic->setMute(muted);\n        mp_FMODchannelMusic->setVolume(volumeMusic);\n    }\n}",
            "title": "Audio Manager - FMOD"
        },
        {
            "location": "/artificialintelligence/",
            "text": "AI",
            "title": "ArtificalIntelligence"
        },
        {
            "location": "/artificialintelligence/#ai",
            "text": "",
            "title": "AI"
        },
        {
            "location": "/pastprojects/",
            "text": "Past Projects\n\n\nDescription\n\n\nI began my journey into the games industry as a 3D artist. These are two of the titles I worked on from conception to launch while I was a part of the development team at Outsmart Games.\n\n\nTools:\n\n\nMaya, Unity, Photoshop\n\n\nTasks (Roost Riders):\n\n\nLevel Design, 3D Assets, Texturing, Unity Level Creation\n\n\nTasks (Gopher Launch):\n\n\n3D Assets, Texturing\n\n\nFor:\n\n\nOutsmart Games\n\n\nRole:\n\n\n3D Artist\n\n\nRoost Riders Launch Trailer:\n\n\n\n\nGopher Launch Launch Trailer:",
            "title": "PastProjects"
        },
        {
            "location": "/pastprojects/#past-projects",
            "text": "",
            "title": "Past Projects"
        },
        {
            "location": "/pastprojects/#description",
            "text": "I began my journey into the games industry as a 3D artist. These are two of the titles I worked on from conception to launch while I was a part of the development team at Outsmart Games.",
            "title": "Description"
        },
        {
            "location": "/pastprojects/#tools",
            "text": "Maya, Unity, Photoshop",
            "title": "Tools:"
        },
        {
            "location": "/pastprojects/#tasks-roost-riders",
            "text": "Level Design, 3D Assets, Texturing, Unity Level Creation",
            "title": "Tasks (Roost Riders):"
        },
        {
            "location": "/pastprojects/#tasks-gopher-launch",
            "text": "3D Assets, Texturing",
            "title": "Tasks (Gopher Launch):"
        },
        {
            "location": "/pastprojects/#for",
            "text": "Outsmart Games",
            "title": "For:"
        },
        {
            "location": "/pastprojects/#role",
            "text": "3D Artist",
            "title": "Role:"
        },
        {
            "location": "/pastprojects/#roost-riders-launch-trailer",
            "text": "",
            "title": "Roost Riders Launch Trailer:"
        },
        {
            "location": "/pastprojects/#gopher-launch-launch-trailer",
            "text": "",
            "title": "Gopher Launch Launch Trailer:"
        }
    ]
}